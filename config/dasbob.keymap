#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <zmk-helpers/helper.h>
#include <zmk-helpers/key-labels/36.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define QUICK_TAP_MS 175
#define THUMB_QUICK_TAP_MS 250
#define TAPPING_TERM_MS 280
#define DEF 0
#define SYM 1
#define NAV 2
#define NUM 3
#define FUN 4
#define LAY 5
#define MAG 6

#define CMP RGUI

#include "combos.dtsi"


#define ___ &trans
#define XXX &none

&sk {  // sticky-key config
    release-after-ms = <1000>;  // release after 1s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

// tap: comma | shift + tap: semicolon
ZMK_BEHAVIOR(comma_morph, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp COMMA>, <&kp SEMICOLON>;
)

// tap: dot | shift + tap: colon
ZMK_BEHAVIOR(dot_morph, mod_morph,
    bindings = <&kp DOT>, <&kp COLON>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

// tap: qmark | shift + tap: excl
ZMK_BEHAVIOR(qexcl, mod_morph,
    bindings = <&kp QMARK>, <&kp EXCL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)


//  0  1  2  3  4    5  6  7  8  9
// 10 11 12 13 14   15 16 17 18 19
// 20 21 22 23 24   25 26 27 28 29
//       30 31 32   33 34 35
            

#define KEYS_L    \
    0  1  2  3  4 \ 
   10 11 12 13 14 \ 
   20 21 22 23 24  

#define                     KEYS_R \
                     5  6  7  8  9 \
                    15 16 17 18 19 \
                    25 26 27 28 29

#define THUMBS \
      30 31 32 \ 
      33 34 35

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <TAPPING_TERM_MS>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )


MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs


// reuse basic mod-morph scheme
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2) \
    ZMK_MOD_MORPH(NAME, \
        mods = <(MOD_L ## MOD|MOD_R ## MOD)>; \
        bindings = <BINDING1>, <BINDING2>; \
    )

// tap: comma | shift + tap: semicolon | ctrl + shift + tap: <
SIMPLE_MORPH(comma_morph, SFT, &kp COMMA, &comma_inner_morph)
SIMPLE_MORPH(comma_inner_morph, CTL, &kp SEMICOLON, &kp LESS_THAN)

// tap: dot | shift + tap: colon | ctrl + shift + tap: >
SIMPLE_MORPH(dot_morph, SFT, &kp DOT, &dot_inner_morph)
SIMPLE_MORPH(dot_inner_morph, CTL, &kp COLON, &kp GREATER_THAN)

// tap: qmark | shift + tap: excl
SIMPLE_MORPH(qexcl, SFT, &kp QMARK, &kp EXCL)

// tap: left/right parenthesis | shft + tap: less-than/greater-than
SIMPLE_MORPH(lpar_lt, SFT, &kp LPAR, &kp LT)
SIMPLE_MORPH(rpar_gt, SFT, &kp RPAR, &kp GT)

// tap: space | shift + tap: dot -> space -> sticky shift | hold: activate layer
ZMK_HOLD_TAP(lt_spc,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&spc_morph>;
)
SIMPLE_MORPH(spc_morph, SFT, &kp SPACE, &dot_spc)
ZMK_BEHAVIOR(dot_spc, macro,
    wait-ms = <0>;
    tap-ms = <5>;
    bindings = <&kp DOT &kp SPACE &sk LSHFT>;
)

// tap: backspace | lshft + tap: delete | hold: activate layer
ZMK_HOLD_TAP(lt_bspc,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&bs_del>;
)
ZMK_MOD_MORPH(bs_del,
    bindings = <&kp BSPC>, <&kp DEL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
    // keep-mods = <(MOD_RSFT)>;
)

MAKE_HRM(hml_repeat, &kp, &key_repeat, KEYS_R THUMBS)  // used for HRM-combo
MAKE_HRM(hmr_lpar_lt, &kp, &lpar_lt, KEYS_L THUMBS)    // "    "   "   "
MAKE_HRM(hmr_rpar_gt, &kp, &rpar_gt, KEYS_L THUMBS)    // "    "   "   "


ZMK_BEHAVIOR(compose_ae, macro,
    wait-ms = <5>;
    tap-ms = <10>;
    bindings = <&kp CMP &kp DQT &kp A>;
)

ZMK_BEHAVIOR(compose_oe, macro,
    wait-ms = <5>;
    tap-ms = <10>;
    bindings = <&kp CMP &kp DQT &kp O>;
)

ZMK_BEHAVIOR(compose_ue, macro,
    wait-ms = <5>;
    tap-ms = <10>;
    bindings = <&kp CMP &kp DQT &kp U>;
)

ZMK_BEHAVIOR(compose_sz, macro,
    wait-ms = <5>;
    tap-ms = <10>;
    bindings = <&kp CMP &kp S &kp S>;
)

/ {
behaviors {

    // We cannot override global behaviors yet (?), so make a sticky key behavior.
    skq: sticky_key_quick_release {
        compatible = "zmk,behavior-sticky-key";
        label = "STICKY_KEY_QUICK_RELEASE";
        #binding-cells = <1>;
        bindings = <&kp>;
        release-after-ms = <1000>;
        quick-release;
        ignore-modifiers;
    };

    smart_shft: smart_shift {
        compatible = "zmk,behavior-mod-morph";
        label = "SMART_SHIFT";
        #binding-cells = <0>;
        bindings = <&skq LSHFT>, <&caps_word>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    thb: thumb_with_repeat {
        compatible = "zmk,behavior-hold-tap";
        label = "THUMB_WITH_REPEAT";
        #binding-cells = <2>;
        tapping-term-ms = <TAPPING_TERM_MS>;
        quick_tap_ms = <THUMB_QUICK_TAP_MS>;
        require-prior-idle-ms = <150>;
        /* flavor = "tap-unless-interrupted"; */
        flavor = "balanced";
        bindings = <&mo>, <&kp>;
    };
};
};

//  0  1  2  3  4    5  6  7  8  9
// 10 11 12 13 14   15 16 17 18 19
// 20 21 22 23 24   25 26 27 28 29
//       30 31 32   33 34 35
            
/ {
    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <

&kp Q           &kp W           &kp F           &kp P           &kp B                   &kp J           &kp L           &kp U           &kp Y           &kp APOS
&hml LGUI A     &hml LALT R     &hml LSHIFT S   &hml LCTRL T    &kp G                   &kp M           &hmr RCTRL N    &hmr RSHIFT E   &hmr LALT I     &hmr LGUI O   
&kp Z           &kp X           &kp C           &kp D           &kp V                   &kp K           &kp H           &comma_morph    &dot_morph      &qexcl  
                                &thb LAY TAB    &lt_bspc NAV 0  &thb FUN ESC            &thb NUM RET    &lt_spc SYM 0   &smart_shft    
            >;
        };

        sym {
            bindings = <
&kp AT          &kp UNDER       &kp LBKT        &kp RBKT        &kp CARET               &kp EXCL        &kp LT          &kp GT          &kp EQUAL       &kp AMPS   
&kp BSLH        &kp FSLH        &kp LBRC        &kp RBRC        &kp STAR                &kp QMARK       &kp LPAR        &kp RPAR        &kp MINUS       &kp COLON  
&kp HASH        &kp DLLR        &kp PIPE        &kp TILDE       &kp GRAVE               &kp PLUS        &kp PRCNT       &kp DQT         &kp SQT         &kp SEMI   
                                ___             ___             ___                     ___             ___             ___
            >;
        };

        nav {
            bindings = <
___             ___             ___             ___             ___                     ___             ___             ___             ___             ___        
___             ___             ___             ___             ___                     ___             &kp LEFT        &kp DOWN        &kp UP          &kp RIGHT  
___             ___             ___             ___             ___                     ___             &kp HOME        &kp PG_DN       &kp PG_UP       &kp END    
                                ___             ___             ___                     ___             ___             ___
            >;
        };

        num {
            bindings = <
___             &kp N7          &kp N8          &kp N9          ___                     ___             ___             ___             ___             ___        
&kp N0          &kp N4          &kp N5          &kp N6          ___                     ___             ___             ___             ___             ___        
___             &kp N1          &kp N2          &kp N3          ___                     ___             ___             ___             ___             ___        
                                ___             ___             ___                     ___             ___             ___
            >;
        };
            
        fun {
            bindings = <
&kp F12         &kp F7          &kp F8          &kp F9          ___                     ___             ___             ___             ___             ___        
&kp F11         &kp F4          &kp F5          &kp F6          ___                     ___             ___             ___             ___             ___        
&kp F10         &kp F1          &kp F2          &kp F3          ___                     ___             ___             ___             ___             ___        
                                ___             ___             ___                     ___             ___             ___
            >;
        };
            
        lay {
            bindings = <
___             ___             ___             &bt BT_SEL 2    &bt BT_SEL 3            ___             ___             ___             ___             ___     
&bootloader     ___             &bt BT_SEL 0    &bt BT_SEL 1    &out OUT_USB            ___             &compose_ue     &compose_ae     &compose_oe     &compose_sz
&sys_reset      ___             ___             ___             &out OUT_BLE            ___             &compose_ue     &compose_ae     &compose_oe     &compose_sz

                                ___             ___             ___                     ___             &bt BT_CLR      &bt BT_CLR_ALL
            >;
        };
    };
};
